const TelegramBot = require('node-telegram-bot-api');
const fs = require('fs');

const bot = new TelegramBot('7458341372:AAEIojWlsZIspFgmDkAcgfpeAn4yDIBPcIE', { polling: true });

let users = fs.existsSync('users.json') ? JSON.parse(fs.readFileSync('users.json')) : {};

const saveData = () => fs.writeFileSync('users.json', JSON.stringify(users, null, 2));

const express = require('express');
const app = express();
app.get('/', (req, res) => res.send('Hello World!'));
app.listen(process.env.PORT || 3000);

// ==== –†–∞–±–æ—Ç–∞ —Å –ë–î (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏) ====

/** –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã. –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞—Ç—å —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ */
function getUser(id, username = '') {
  if (!users[id]) {
    users[id] = {
      stars: 0,
      invited: [],
      username,
      lastDaily: 0,
      inviterId: null, // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
    };
    saveData();
  }
  // –û–±–Ω–æ–≤–ª—è–µ–º username, –µ—Å–ª–∏ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è
  if (username && users[id].username !== username) {
    users[id].username = username;
    saveData();
  }
  return users[id];
}

/** –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ */
function addReferral(inviterId, invitedId) {
  const inviter = getUser(inviterId);
  if (!inviter.invited.includes(invitedId)) {
    inviter.stars += 4;
    inviter.invited.push(invitedId);
    saveData();
    bot.sendMessage(inviterId, `üéâ –ù–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª!\n–ù–∞—á–∏—Å–ª–µ–Ω–æ +4 ‚≠êÔ∏è.\nüìä –ë–∞–ª–∞–Ω—Å: ${inviter.stars}`);
  }
}

// ==== –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ —É—Ç–∏–ª–∏—Ç—ã ====

const ADMINS = [6264259847]; // —Ç–≤–æ–π ID
const CHANNELS = ['wave_stars']; // —Ç–≤–æ–∏ –∫–∞–Ω–∞–ª—ã –±–µ–∑ @

const getReferralLink = (id) => `https://t.me/wave_stars_bot?start=${id}`;

async function checkSubscription(userId) {
  for (const channel of CHANNELS) {
    try {
      const member = await bot.getChatMember(`@${channel}`, userId);
      if (['left', 'kicked', 'restricted'].includes(member.status)) {
        return false;
      }
    } catch (e) {
      return false;
    }
  }
  return true;
}

function sendSubscribeMessage(chatId) {
  bot.sendMessage(chatId,
    `ü§ß –ß—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—É—é –≥—Ä—É–ø–ø—É –±–æ—Ç–∞!`,
    {
      reply_markup: {
        inline_keyboard: [
          ...CHANNELS.map(channel => [{ text: `–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª`, url: `https://t.me/${channel}` }]),
          [{ text: '‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', callback_data: 'check_subs' }]
        ]
      }
    }
  );
}

function sendMainMenu(chatId, username) {
  bot.sendMessage(chatId, `üëãüèª –ü—Ä–∏–≤–µ—Ç, ${username}!

‚≠êÔ∏è –Ø WaveStars –∏ —è —Ä–∞–∑–¥–∞—é –∑–≤—ë–∑–¥—ã –±–µ—Å–ø–ª–∞—Ç–Ω–æ! 
üî• –ü—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π, –≤—ã–ø–æ–ª–Ω—è–π –∑–∞–¥–∞–Ω–∏—è –∏ –æ–±–º–µ–Ω–∏–≤–∞–π –Ω–∞ –∑–≤—ë–∑–¥—ã!`, {
    reply_markup: {
      keyboard: [
        [{ text: 'üìì –ü—Ä–æ—Ñ–∏–ª—å' }, { text: 'üë• –î—Ä—É–∑—å—è' }],
        [{ text: 'üéÆ –ò–≥—Ä—ã' }, { text: 'üéÅ –ë–æ–Ω—É—Å' }],
        [{ text: 'üí∏ –í—ã–≤–µ—Å—Ç–∏' }, { text: 'üèÜ –¢–æ–ø' }],
        ...(ADMINS.includes(Number(chatId)) ? [[{ text: '‚öôÔ∏è –ê–¥–º–∏–Ω–∫–∞' }]] : [])
      ],
      resize_keyboard: true
    }
  });
}

// ==== –•–µ–Ω–¥–ª–µ—Ä—ã ====

bot.on('message', async (msg) => {
  const chatId = msg.chat.id.toString();
  const username = msg.from.first_name || '–ë–µ–∑ –∏–º–µ–Ω–∏';

  const user = getUser(chatId, username);

  // –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ /start —Å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–º ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º inviterId, –Ω–æ –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –±–æ–Ω—É—Å —Å—Ä–∞–∑—É
  if (msg.text && msg.text.startsWith('/start')) {
    const parts = msg.text.split(' ');
    if (parts.length > 1) {
      const inviterId = Number(parts[1]);
      if (inviterId !== chatId) {
        user.inviterId = inviterId;
        saveData();
      }
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏, –µ—Å–ª–∏ –Ω–µ—Ç - –ø—Ä–µ–¥–ª–æ–≥–∞–µ–º –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è
  if (!(await checkSubscription(chatId))) {
    return sendSubscribeMessage(chatId);
  }

  // –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
  if (msg.text && msg.text.startsWith('/start')) {
    sendMainMenu(chatId, username);
    return;
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö –∫–æ–º–∞–Ω–¥ –∏ —Ç–µ–∫—Å—Ç–∞
  if (msg.text) {
    switch (msg.text) {
      case 'üìì –ü—Ä–æ—Ñ–∏–ª—å': {
        const user = getUser(chatId);
        bot.sendMessage(chatId, `üìì [${msg.from.first_name}](tg://user?id=${msg.from.id}), —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å

üìä –ë–∞–ª–∞–Ω—Å: ${user.stars} ‚≠êÔ∏è
üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ: ${user.invited.length} –¥—Ä—É–∑–µ–π
üéÅ –ü–æ–ª—É—á–µ–Ω–æ –∑–∞ –¥—Ä—É–∑–µ–π: ${user.invited.length * 4} ‚≠êÔ∏è`, { parse_mode: 'Markdown' });
        break;
      }

      case 'üë• –î—Ä—É–∑—å—è': {
        const user = getUser(chatId);
        const invitedCount = user.invited.length;
        const referralLink = getReferralLink(chatId);
        const shareText = encodeURIComponent(`üòé –Ø —É–∂–µ –ø–æ–ª—É—á–∏–ª –∑–≤—ë–∑–¥—ã! –•–æ—á–µ—à—å —Ç–æ–∂–µ? –í–æ—Ç —Å—Å—ã–ª–∫–∞ üëá\n${referralLink}`);
        const quoteText = 'üòé –î—Ä—É–∑—å—è ‚Äî —Å–∞–º—ã–π –±—ã—Å—Ç—Ä—ã–π —Å–ø–æ—Å–æ–± –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –∑–≤—ë–∑–¥—ã (‚≠êÔ∏è) –≤ –±–æ—Ç–µ!\n–ó–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞ —Ç—ã –ø–æ–ª—É—á–∏—à—å +4 ‚≠êÔ∏è –Ω–∞ —Å–≤–æ–π –±–∞–ª–∞–Ω—Å.\n\nü§´ –í–æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–±–æ—á–∏—Ö —Å–ø–æ—Å–æ–±–æ–≤, –∫–∞–∫ –∑–≤–∞—Ç—å –±–æ–ª—å—à–µ –ª—é–¥–µ–π:\n\n‚ú® –ü—Ä–æ—Å—Ç–æ–π —Å–ø–æ—Å–æ–±:\n–ü–æ–ø—Ä–æ—Å–∏ –¥—Ä—É–∑–µ–π, –æ–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫–æ–≤ –∏–ª–∏ –∑–Ω–∞–∫–æ–º—ã—Ö –ø–µ—Ä–µ–π—Ç–∏ –ø–æ —Ç–≤–æ–µ–π —Å—Å—ã–ª–∫–µ. –ß—Ç–æ–±—ã –æ–Ω–∏ —Ç–æ—á–Ω–æ –ø–µ—Ä–µ—à–ª–∏, —Ä–∞—Å—Å–∫–∞–∂–∏ –ø–∞—Ä—É —Å–ª–æ–≤ –æ –±–æ—Ç–µ –∏ –ø–æ–¥–∞—Ä–∫–∞—Ö.\n\n–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —Å–ø–æ—Å–æ–±:\n–ü—Ä–∏–¥—É–º–∞–π –∑–∞–º–∞–Ω—á–∏–≤—ã–π —Ç–µ–∫—Å—Ç, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n¬´–ö—Ç–æ —Ö–æ—á–µ—Ç –ø–æ–¥–∞—Ä–æ–∫? –ü–∏—à–∏—Ç–µ –≤ –ª—Å¬ª\n–∏–ª–∏\n¬´–ö—Ç–æ —Ö–æ—á–µ—Ç –∑–≤—ë–∑–¥—ã? –ù–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ¬ª\n–ü—É–±–ª–∏–∫—É–π —Ç–∞–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–µ—Å–µ–¥–∞—Ö, –õ–° –∏–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö –ø–æ–¥ –ø–æ—Å—Ç–∞–º–∏.\n\nüî• –î–ª—è —Ç–µ—Ö, —É –∫–æ–≥–æ –µ—Å—Ç—å –∞—É–¥–∏—Ç–æ—Ä–∏—è:\n–†–∞–∑–º–µ—Å—Ç–∏ —Å—Å—ã–ª–∫—É –≤ —Å–≤–æ—ë–º –∫–∞–Ω–∞–ª–µ, –±–µ—Å–µ–¥–µ, TikTok –∏–ª–∏ –¥—Ä—É–≥–∏—Ö —Å–æ—Ü—Å–µ—Ç—è—Ö. –ù–∞–ø–∏—à–∏ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n¬´–•–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å –∑–≤—ë–∑–¥—ã –≤ Telegram? –°–º–æ—Ç—Ä–∏ –≤ –ø—Ä–æ—Ñ–∏–ª–µ!¬ª\n–ù–µ –∑–∞–±—É–¥—å –≤—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ—é —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É.\n\nüöÄ –ë—É–¥—å –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–º!\n–ò—Å–ø–æ–ª—å–∑—É–π –ª—é–±—ã–µ –º–µ—Ç–æ–¥—ã, –¥–∞–∂–µ –æ–±–º–µ–Ω:\n¬´–ü–µ—Ä–µ–π–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ ‚Äî –∏ –ø–æ–ª—É—á–∏—à—å –±–æ–Ω—É—Å!¬ª\n–ß–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–µ–µ ‚Äî —Ç–µ–º –ª—É—á—à–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç!';
        const quotedText = `üéÅ –ü—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π –∏ —è –±—É–¥—É –¥–∞–≤–∞—Ç—å —Ç–µ–±–µ –ø–æ 4‚≠êÔ∏è –∑–∞ –∫–∞–∂–¥–æ–≥–æ!\n\nüê£ –•–æ—á–µ—à—å –∑–Ω–∞—Ç—å –∫–∞–∫ –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å –±–æ–ª—å—à–µ –¥—Ä—É–∑–µ–π? –¢–∞–ø–∞–π üëá\n<blockquote expandable>${quoteText}</blockquote>\nüê• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ: ${invitedCount} –¥—Ä—É–∑–µ–π\nüç≠ –¢–≤–æ—è —Å—Å—ã–ª–∫–∞:\n${referralLink}`;
        bot.sendMessage(chatId, quotedText, {
          parse_mode: 'HTML',
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üì≤ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥—Ä—É–≥—É', url: `https://t.me/share/url?url=${shareText}` }]
            ]
          }
        });
        break;
      }

      case 'üí∏ –í—ã–≤–µ—Å—Ç–∏': {
        const user = getUser(chatId);
        const stars = user.stars;
        const amounts = [50, 100, 350, 500];
        const rows = [];
        for (let i = 0; i < amounts.length; i += 2) {
          rows.push([
            { text: `${amounts[i]} ‚≠êÔ∏è`, callback_data: `withdraw_${amounts[i]}` },
            { text: `${amounts[i + 1]} ‚≠êÔ∏è`, callback_data: `withdraw_${amounts[i + 1]}` }
          ]);
        }
        bot.sendMessage(chatId, `–£ —Ç–µ–±—è ${stars} ‚≠êÔ∏è –Ω–∞ –±–∞–ª–∞–Ω—Å–µ\n\n–í—ã–±–µ—Ä–∏, —Å–∫–æ–ª—å–∫–æ —Ö–æ—á–µ—à—å –≤—ã–≤–µ—Å—Ç–∏:`, {
          reply_markup: { inline_keyboard: rows }
        });
        break;
      }

      case 'üèÜ –¢–æ–ø': {
        bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏ —Ç–∏–ø —Ç–æ–ø–∞:', {
          reply_markup: {
            inline_keyboard: [
              [
                { text: '‚≠êÔ∏è –ü–æ –∑–≤—ë–∑–¥–∞–º', callback_data: 'top_stars' },
                { text: 'üë• –ü–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è–º', callback_data: 'top_invites' }
              ]
            ]
          }
        });
        break;
      }

      case 'üéÆ –ò–≥—Ä—ã': {
        bot.sendMessage(chatId, '–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...');
        break;
      }

      case 'üéÅ –ë–æ–Ω—É—Å': {
        const user = getUser(chatId);
        const now = Date.now();

        const BONUS_INTERVAL = 12 * 60 * 60 * 1000;
        const BONUS_DESCRIPTION = "‚≠êÔ∏è –ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π –∑–≤—ë–∑–¥—ã –ª–µ–≥–∫–æ —Å @wave_stars_bot";

        function formatTime(ms) {
          const h = Math.floor(ms / 3600000).toString().padStart(2, '0');
          const m = Math.floor((ms % 3600000) / 60000).toString().padStart(2, '0');
          const s = Math.floor((ms % 60000) / 1000).toString().padStart(2, '0');
          return `${h} —á–∞—Å. ${m} –º–∏–Ω. ${s} —Å–µ–∫.`;
        }

        if (!user.lastDaily || now - user.lastDaily >= BONUS_INTERVAL) {
          const bonus = 3;
          user.stars += bonus;
          user.lastDaily = now;
          saveData();
          bot.sendMessage(chatId, `üéâ –ë–æ–Ω—É—Å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –¢—ã –ø–æ–ª—É—á–∏–ª ${bonus} ‚≠êÔ∏è`);
        } else {
          const wait = BONUS_INTERVAL - (now - user.lastDaily);
          bot.sendMessage(chatId, `‚è≥ –°–ª–µ–¥—É—é—â–∏–π –±–æ–Ω—É—Å –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —á–µ—Ä–µ–∑ ${formatTime(wait)}`);
        }
        break;
      }

      /* ---–ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨--- */
      case '‚öôÔ∏è –ê–¥–º–∏–Ω–∫–∞': {
        if (!ADMINS.includes(msg.from.id)) return;

        bot.sendMessage(chatId, '‚öôÔ∏è –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', {
          reply_markup: {
            keyboard: [
              [{ text: 'üì§ –†–∞—Å—Å—ã–ª–∫–∞' }],
              [{ text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞' }],
              [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥' }]
            ],
            resize_keyboard: true
          }
        });
        break;
      }

      case '‚¨ÖÔ∏è –ù–∞–∑–∞–¥': {
        sendMainMenu(chatId, user.username);
        break;
      }

      case 'üì§ –†–∞—Å—Å—ã–ª–∫–∞': {
        if (!ADMINS.includes(msg.from.id)) return;

        bot.sendMessage(chatId, '‚úçÔ∏è –í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ (HTML —Ä–∞–∑—Ä–µ—à—ë–Ω):', {
          parse_mode: 'HTML',
          reply_markup: {
            keyboard: [[{ text: '‚ùå –û—Ç–º–µ–Ω–∞' }]],
            resize_keyboard: true
          }
        });

        users[chatId].awaitingBroadcastText = true;
        break;
      }
      case 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞': {
        if (!ADMINS.includes(msg.from.id)) return;

        const totalUsers = Object.keys(users).length;
        const totalStars = Object.values(users).reduce((acc, u) => acc + (u.stars || 0), 0);
        const totalInvites = Object.values(users).reduce((acc, u) => acc + (u.invited?.length || 0), 0);
        const active24h = Object.values(users).filter(u => Date.now() - (u.lastDaily || 0) <= 24 * 60 * 60 * 1000).length;
        const bonusClaimed = Object.values(users).filter(u => u.lastDaily).length;

        bot.sendMessage(chatId, `
üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>:

üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>${totalUsers}</b>
‚≠êÔ∏è –í—Å–µ–≥–æ –∑–≤—ë–∑–¥: <b>${totalStars}</b>
ü§ù –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π: <b>${totalInvites}</b>

üïí –ê–∫—Ç–∏–≤–Ω—ã –∑–∞ 24—á: <b>${active24h}</b>
üéÅ –ü–æ–ª—É—á–∏–ª–∏ –±–æ–Ω—É—Å —Ö–æ—Ç—è –±—ã —Ä–∞–∑: <b>${bonusClaimed}</b>
        `.trim(), { parse_mode: 'HTML' });

        break;
      }


      default:
        ///////////////

        if (msg.text === '‚ùå –û—Ç–º–µ–Ω–∞') {
          if (!ADMINS.includes(msg.from.id)) return;
          users[chatId].awaitingBroadcastText = false;
          users[chatId].awaitingBroadcastConfirm = false;
          users[chatId].broadcast = null;
          sendMainMenu(chatId, user.username);
          return;
        }

        if (users[chatId].awaitingBroadcastText) {
          users[chatId].awaitingBroadcastText = false;
          users[chatId].broadcast = { text: msg.text };

          bot.sendMessage(chatId, msg.text, {
            parse_mode: 'HTML',
            reply_markup: {
              inline_keyboard: [[
                { text: 'üöÄ –û—Ç–ø—Ä–∞–≤–∏—Ç—å', callback_data: 'confirm_broadcast' },
                { text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'cancel_broadcast' }
              ]]
            }
          });

          users[chatId].awaitingBroadcastConfirm = true;
          return;
        }

        bot.sendMessage(chatId, `–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏:`, {
          reply_markup: {
            keyboard: [
              [{ text: 'üìì –ü—Ä–æ—Ñ–∏–ª—å' }, { text: 'üë• –î—Ä—É–∑—å—è' }],
              [{ text: 'üéÆ –ò–≥—Ä—ã' }, { text: 'üéÅ –ë–æ–Ω—É—Å' }],
              [{ text: 'üí∏ –í—ã–≤–µ—Å—Ç–∏' }, { text: 'üèÜ –¢–æ–ø' }],
              ...(ADMINS.includes(Number(chatId)) ? [[{ text: '‚öôÔ∏è –ê–¥–º–∏–Ω–∫–∞' }]] : [])
            ],
            resize_keyboard: true
          }
        });
        break;
    }

  }


});


// –ö–∞–ª–ª–±–µ–∫

bot.on('callback_query', async (query) => {
  const chatId = query.message.chat.id.toString();
  const user = getUser(chatId);


  // ADMINKA
  if (query.data === 'cancel_broadcast') {
    users[chatId].awaitingBroadcastConfirm = false;
    users[chatId].broadcast = null;
    bot.editMessageText('‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.', {
      chat_id: chatId,
      message_id: query.message.message_id
    });
    sendMainMenu(chatId, user.username);
    return;
  }

  if (query.data === 'confirm_broadcast') {
    const broadcast = users[chatId].broadcast;
    if (!broadcast) return;

    let sent = 0;
    let noSent = 0;
    for (const id in users) {
      try {
        await bot.sendMessage(id, broadcast.text, { parse_mode: 'HTML' });
        sent++;
      } catch (e) { noSent++ }
    }

    bot.editMessageText(`‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ ${sent} (‚ùå ${noSent}) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.`, {
      chat_id: chatId,
      message_id: query.message.message_id
    });

    users[chatId].awaitingBroadcastConfirm = false;
    users[chatId].broadcast = null;
    sendMainMenu(chatId, user.username);
  }


  if (query.data === 'check_subs') {

    bot.deleteMessage(query.message.chat.id, query.message.message_id);
    if (await checkSubscription(chatId)) {
      // –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª–∫—É –µ—Å–ª–∏ –µ—Å—Ç—å inviterId –∏ —Ä–µ—Ñ–µ—Ä–∞–ª –µ—â—ë –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω
      if (user.inviterId && users[user.inviterId] && !users[user.inviterId].invited.includes(chatId)) {
        addReferral(user.inviterId, chatId);
        delete user.inviterId; // —É–¥–∞–ª—è–µ–º, —á—Ç–æ–±—ã –Ω–µ –¥–æ–±–∞–≤–ª—è—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ
        saveData();
      }
      sendMainMenu(chatId, user.username);
    } else {
      bot.answerCallbackQuery(query.id, '‚ùå –ë–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –∑–∞–∫—Ä—ã—Ç.', true);
      sendSubscribeMessage(chatId);
    }
  }

  if (query.data.startsWith('withdraw_')) {
    const amount = parseInt(query.data.split('_')[1], 10);
    if (user.stars >= amount) {
      user.stars -= amount;
      saveData();
      bot.sendMessage(chatId, `‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ ${amount} ‚≠êÔ∏è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!\nüëå –û–±—ã—á–Ω–æ —ç—Ç–æ –∑–∞–Ω–∏–º–∞–µ—Ç –æ—Ç 5 –º–∏–Ω—É—Ç –¥–æ 24 —á–∞—Å–æ–≤!`);
    } else {
      return bot.answerCallbackQuery(
        query.id,
        `‚ùóÔ∏è–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ‚≠êÔ∏è –¥–ª—è –≤—ã–≤–æ–¥–∞!\n‚úñÔ∏è –¢–µ–±–µ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç ${amount - user.stars} ‚≠êÔ∏è`,
        true
      );
    }
  }

  if (query.data === 'top_stars' || query.data === 'top_invites') {
    const escapeHTML = (text) =>
      String(text)
        .replace(/&/g, '&amp;')
        .replace(/</g, '&lt;')
        .replace(/>/g, '&gt;')
        .replace(/"/g, '&quot;');

    const formatUsernameHTML = (user, id) => {
      let name = user.username;
      name = name.replace(/^@+/, '');
      name = escapeHTML(name);
      return name;
    };

    const topType = query.data === 'top_stars' ? 'stars' : 'invited';

    // –û–±—â–∏–π –º–∞—Å—Å–∏–≤ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    const fullTop = [];

    for (const id in users) {
      const user = users[id];
      const value = topType === 'stars' ? user.stars : (user.invited?.length || 0);
      if (typeof value !== 'number') continue;

      fullTop.push({ id, user, value });
    }

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫ –ø–æ —É–±—ã–≤–∞–Ω–∏—é
    fullTop.sort((a, b) => b.value - a.value);

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const currentUserIndex = fullTop.findIndex(entry => entry.id === chatId);
    const currentUserPosition = currentUserIndex >= 0 ? currentUserIndex + 1 : null;

    // –û—Ç–±–∏—Ä–∞–µ–º —Ç–æ–ø 10
    const top10 = fullTop.slice(0, 10);

    // –ó–∞–≥–æ–ª–æ–≤–æ–∫
    let title =
      topType === 'stars'
        ? 'üèÜ <b>–¢–æ–ø –ø–æ –∑–≤—ë–∑–¥–∞–º:</b>\n\n'
        : 'üèÜ <b>–¢–æ–ø –ø–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è–º:</b>\n\n';
    // –ó–∞–≥–æ–ª–æ–≤–æ–∫ ‚Ññ2
    let titleType =
      topType === 'stars'
        ? '<b>–∑–∞—Ä–∞–±–æ—Ç–∞–ª</b>'
        : '<b>–ø—Ä–∏–≥–ª–∞—Å–∏–ª</b>';

    // –¢–µ–ª–æ —Ç–æ–ø–∞
    let text = top10.reduce((acc, entry, i) => {
      const { id, user, value } = entry;
      const suffix = topType === 'stars' ? '‚≠êÔ∏è' : '–¥—Ä—É–∑–µ–π';
      return acc + `${i + 1}. ${formatUsernameHTML(user, id)}: ${titleType} ${value} ${suffix}\n`;
    }, title);

    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ–±—â–µ–º —Å–ø–∏—Å–∫–µ
    if (currentUserPosition) {
      text += `\nüìç –¢—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è –Ω–∞ <b>${currentUserPosition}</b> –º–µ—Å—Ç–µ`;
    } else {
      return;
    }

    return bot.editMessageText(text,
      {
        chat_id: query.message.chat.id,
        message_id: query.message.message_id,
        parse_mode: "HTML",
        disable_notification: true,
        reply_markup: {
          inline_keyboard: [
            [
              { text: '‚≠êÔ∏è –ü–æ –∑–≤—ë–∑–¥–∞–º', callback_data: 'top_stars' },
              { text: 'üë• –ü–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è–º', callback_data: 'top_invites' }
            ]
          ]
        },
      },
    );
  }

});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
console.log('Bot started...');

